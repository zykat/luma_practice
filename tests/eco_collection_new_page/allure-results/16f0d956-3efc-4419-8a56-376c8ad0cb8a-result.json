{"name": "test_title_page", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\n  (Session info: headless chrome=119.0.6045.200)\nStacktrace:\n\tGetHandleVerifier [0x003F72A3+45731]\n\t(No symbol) [0x00382D51]\n\t(No symbol) [0x0027880D]\n\t(No symbol) [0x0027508E]\n\t(No symbol) [0x0026B4B2]\n\t(No symbol) [0x0026C34F]\n\t(No symbol) [0x0026B746]\n\t(No symbol) [0x0026AAF8]\n\t(No symbol) [0x0026AA9A]\n\t(No symbol) [0x002697F2]\n\t(No symbol) [0x00269ED8]\n\t(No symbol) [0x0027A5B3]\n\t(No symbol) [0x002DBD41]\n\t(No symbol) [0x002C7FDC]\n\t(No symbol) [0x002DB7A2]\n\t(No symbol) [0x002C7DD6]\n\t(No symbol) [0x002A31F6]\n\t(No symbol) [0x002A439D]\n\tGetHandleVerifier [0x00700716+3229462]\n\tGetHandleVerifier [0x007484C8+3523784]\n\tGetHandleVerifier [0x0074214C+3498316]\n\tGetHandleVerifier [0x00481680+611968]\n\t(No symbol) [0x0038CCCC]\n\t(No symbol) [0x00388DF8]\n\t(No symbol) [0x00388F1D]\n\t(No symbol) [0x0037B2C7]\n\tBaseThreadInitThunk [0x76317BA9+25]\n\tRtlInitializeExceptionChain [0x777DBD2B+107]\n\tRtlClearBits [0x777DBCAF+191]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ca4c59d9dc31ba30005ab9154e5bdc3d\")>\n\n    def test_title_page(driver):\n>       page = CollectionPage(driver, url=CollectionPage.URL)\n\ntest_collection_page.py:6: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\pages\\other_pages\\eco_collection_new.py:41: in __init__\n    self.current_url = url\n..\\..\\base\\seleniumbase.py:114: in current_url\n    self.driver.get(val)\nD:\\git\\LumaQA_07\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\nD:\\git\\LumaQA_07\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001EAFA55DF60>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_NAME_NOT_RESOLVED\\\\n  (...dInitThunk [0x76317BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x777DBD2B+107]\\\\n\\\\tRtlClearBits [0x777DBCAF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\nE         (Session info: headless chrome=119.0.6045.200)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x003F72A3+45731]\nE       \t(No symbol) [0x00382D51]\nE       \t(No symbol) [0x0027880D]\nE       \t(No symbol) [0x0027508E]\nE       \t(No symbol) [0x0026B4B2]\nE       \t(No symbol) [0x0026C34F]\nE       \t(No symbol) [0x0026B746]\nE       \t(No symbol) [0x0026AAF8]\nE       \t(No symbol) [0x0026AA9A]\nE       \t(No symbol) [0x002697F2]\nE       \t(No symbol) [0x00269ED8]\nE       \t(No symbol) [0x0027A5B3]\nE       \t(No symbol) [0x002DBD41]\nE       \t(No symbol) [0x002C7FDC]\nE       \t(No symbol) [0x002DB7A2]\nE       \t(No symbol) [0x002C7DD6]\nE       \t(No symbol) [0x002A31F6]\nE       \t(No symbol) [0x002A439D]\nE       \tGetHandleVerifier [0x00700716+3229462]\nE       \tGetHandleVerifier [0x007484C8+3523784]\nE       \tGetHandleVerifier [0x0074214C+3498316]\nE       \tGetHandleVerifier [0x00481680+611968]\nE       \t(No symbol) [0x0038CCCC]\nE       \t(No symbol) [0x00388DF8]\nE       \t(No symbol) [0x00388F1D]\nE       \t(No symbol) [0x0037B2C7]\nE       \tBaseThreadInitThunk [0x76317BA9+25]\nE       \tRtlInitializeExceptionChain [0x777DBD2B+107]\nE       \tRtlClearBits [0x777DBCAF+191]\n\nD:\\git\\LumaQA_07\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "start": 1702092809327, "stop": 1702092819474, "uuid": "ccad2f2a-7020-4a33-a30c-c83f83baf548", "historyId": "cd476ee7f655293f123a51228fbc266a", "testCaseId": "cd476ee7f655293f123a51228fbc266a", "fullName": "tests.eco_collection_new_page.test_collection_page#test_title_page", "labels": [{"name": "parentSuite", "value": "tests.eco_collection_new_page"}, {"name": "suite", "value": "test_collection_page"}, {"name": "host", "value": "LAPTOP-T40JAVOL"}, {"name": "thread", "value": "9356-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.eco_collection_new_page.test_collection_page"}]}